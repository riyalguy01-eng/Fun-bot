import os
import random
from collections import defaultdict
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters
)

BOT_TOKEN = os.getenv("BOT_TOKEN")  # Set in Railway Variables

# ----- Storage -----
message_count = defaultdict(int)

# ----- Commands -----
async def start(update, context):
    await update.message.reply_text("Hello 👋 I’m your fun TG bot, running on Railway!")

async def help(update, context):
    commands = """
🤖 Commands:
/start - Greet
/help - Show commands
/joke - Random joke
/meme - Meme text
/roast - Savage roast
/compliment - Nice words
/stats - Message leaderboard
"""
    await update.message.reply_text(commands)

async def joke(update, context):
    jokes = [
        "Why don’t bots panic? They always keep their cache 🤖",
        "I’d tell you a UDP joke, but you might not get it 📡",
        "404 Joke not found 😅"
    ]
    await update.message.reply_text(random.choice(jokes))

async def meme(update, context):
    memes = [
        "Me coding bots at 3 AM 🥴",
        "This group without me: 💤",
        "AI be like: I’m not lazy, I’m energy-efficient ⚡"
    ]
    await update.message.reply_text(random.choice(memes))

async def roast(update, context):
    roasts = [
        "You bring people together… by making them agree you’re annoying 😂",
        "Somewhere, a tree is producing oxygen for you. I hope you apologize 🌳",
        "You have something on your face… oh wait, that’s just your face 💀"
    ]
    await update.message.reply_text(random.choice(roasts))

async def compliment(update, context):
    compliments = [
        "Your brain has more connections than WiFi 🌐",
        "You’re proof that evolution sometimes works 💡",
        "If vibes were money, you’d be a billionaire ✨"
    ]
    await update.message.reply_text(random.choice(compliments))

async def stats(update, context):
    if not message_count:
        await update.message.reply_text("No messages tracked yet 📭")
        return
    leaderboard = sorted(message_count.items(), key=lambda x: x[1], reverse=True)
    text = "📊 Message Leaderboard:\n"
    for user, count in leaderboard[:5]:
        text += f"{user}: {count} msgs\n"
    await update.message.reply_text(text)

# ----- Auto Reactions -----
async def track_and_react(update, context):
    user = update.effective_user.first_name
    message_count[user] += 1

    text = update.message.text.lower()

    # Word triggers
    triggers = {
        "chess": "♟️ Still thinking 20 minutes per move?",
        "bot": "Beep boop 🤖",
        "sleep": "Don’t sleep, code bots instead ⚡"
    }
    for word, reply in triggers.items():
        if word in text:
            await update.message.reply_text(reply)
            break

    # Random sarcasm (10% chance)
    if random.random() < 0.1:
        sarcastic_replies = [
            "Wow… groundbreaking message 🙄",
            "This is why aliens avoid us 👽",
            "Bro, even Google didn’t ask for this 📉"
        ]
        await update.message.reply_text(random.choice(sarcastic_replies))

# ----- Main -----
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # Command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("joke", joke))
    app.add_handler(CommandHandler("meme", meme))
    app.add_handler(CommandHandler("roast", roast))
    app.add_handler(CommandHandler("compliment", compliment))
    app.add_handler(CommandHandler("stats", stats))

    # Message handler
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_and_react))

    print("Bot is running…")
    app.run_polling()

if __name__ == "__main__":
    main()

