import os
import logging
import random
import asyncio
from collections import defaultdict

from telegram import Update, ForceReply
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# Read BOT_TOKEN from environment variable
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# In-memory stats
user_message_count = defaultdict(int)

# Data for bot responses
JOKES = [
    "Why did the programmer quit his job? Because he didn't get arrays.",
    "Why do Java developers wear glasses? Because they can't C#.",
    "What did the Python say when he was late? import time!",
]
MEMES = [
    "Commit code, push bugs.",
    "When you fix one bug and three appear.",
    "Just deployed to production... pray for me.",
]
ROASTS = [
    "I'd explain it to you but I left my crayons at home.",
    "If your brain was dynamite, there wouldn't be enough to blow your hat off.",
    "You're not stupid; you just have bad luck thinking.",
]
COMPLIMENTS = [
    "You light up the room!",
    "Everyone loves working with you.",
    "Your outlook is infectious.",
]
TRIGGER_WORDS = {
    "chess": "Chess? Only if you promise not to rage quit this time.",
    "bot": "Talking about bots? Don't get jealous, I'm the cool one here.",
    "sleep": "Sleep is for the weak. Real programmers debug at midnight.",
}

SARCASTIC_REPLIES = [
    "Wow, how original.",
    "You really thought that would impress me?",
    "Such insight, I'm overwhelmed.",
    "A message worthy of a Nobel prize.",
]

# Command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        rf"Hi {user.mention_html()}! Welcome to the quirky Telegram bot.", reply_markup=ForceReply()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        "/start – Greet the bot",
        "/help – List all commands",
        "/joke – Get a random joke",
        "/meme – Get a meme text",
        "/roast – Get roasted",
        "/compliment – Receive a compliment",
        "/stats – See top chatters",
    ]
    await update.message.reply_text("Commands:\n" + "\n".join(commands))

async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(JOKES))

async def meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(MEMES))

async def roast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(ROASTS))

async def compliment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(COMPLIMENTS))

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_message_count:
        await update.message.reply_text("No messages counted yet.")
        return
    sorted_stats = sorted(user_message_count.items(), key=lambda x: x[1], reverse=True)
    stats_text = "Top chatters:\n"
    for user_id, count in sorted_stats[:5]:
        stats_text += f"User {user_id}: {count} messages\n"
    await update.message.reply_text(stats_text)

# Message handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message_count[user_id] += 1
    text = update.message.text.lower()

    # React to trigger words
    for word, reaction in TRIGGER_WORDS.items():
        if word in text:
            await update.message.reply_text(reaction)
            return

    # Sarcasm mode (5% chance)
    if random.random() < 0.05:
        await update.message.reply_text(random.choice(SARCASTIC_REPLIES))
        return

async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("joke", joke))
    application.add_handler(CommandHandler("meme", meme))
    application.add_handler(CommandHandler("roast", roast))
    application.add_handler(CommandHandler("compliment", compliment))
    application.add_handler(CommandHandler("stats", stats))
    # Message handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
